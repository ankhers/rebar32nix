-module(rebar32nix).

%% API exports
-export([main/1]).

%%====================================================================
%% API functions
%%====================================================================

%% escript Entry point
main(Args) ->
    %% io:format("Args: ~p~n", [Args]),
    {ok, {Opts, _}} = getopt:parse(opts_list(), Args),
    case proplists:get_bool(help, Opts) of
        true -> getopt:usage(opts_list(), "rebar32nix");
        false ->
            _ = application:load(rebar32nix),
            {ok, {application, AppName, List}} = app_src(),
            Deps = get_deps_list(),
            Vsn = proplists:get_value(vsn, List),
            ReleaseType = proplists:get_value(release_type, Opts),
            OTPVsn = proplists:get_value(otp_version, Opts),
            App = #{
                    name => AppName,
                    vsn => Vsn,
                    src => "./.",
                    deps => Deps,
                    otp_vsn => OTPVsn,
                    release_type => ReleaseType
                   },
            Doc = prettypr:above(header(Args), beam2nix:new(App)),
            io:format("~s", [prettypr:format(Doc)])
    end,
    erlang:halt(0).

%%====================================================================
%% Internal functions
%%====================================================================
opts_list() ->
    [
     %% {Name,      ShortOpt,  LongOpt,        ArgSpec,         HelpMsg}
     {help,         $h,        "help",         undefined,       "Print this help."},
     {version,      $v,        "version",      undefined,       "Show version information."},
     {release_type, undefined, "release-type", {atom, release}, "Generate either a release or an escript."},
     {otp_version,  undefined, "otp-version", {string, "20"},   "Specify the OTP version to build for."}
    ].

-spec header([string()]) -> prettypr:document().
header(Args) ->
    ArgsDoc = lists:map(fun prettypr:text/1, Args),
    {ok, Vsn} = application:get_key(rebar32nix, vsn),
    Docs = [
            prettypr:text("# Generated by rebar32nix"),
            prettypr:beside(prettypr:text(Vsn), prettypr:text(":")),
            prettypr:text("rebar32nix")
            | ArgsDoc
           ],
    Docs1 = lists:join(prettypr:text(" "), Docs),
    lists:foldr(fun prettypr:beside/2, prettypr:empty(), Docs1).
    %% prettypr:sep([
    %%               prettypr:text("# Generated by rebar32nix"),
    %%               prettypr:beside(prettypr:text(Vsn), prettypr:text(":")),
    %%               prettypr:text("rebar32nix")
    %%               | ArgsDoc]).

-spec app_src() -> {ok, term()}.
app_src() ->
    SrcPath = "./src",
    {ok, Files} = file:list_dir(SrcPath),
    [FileName] = lists:filter(fun(F) ->
                                      case re:run(F, "\.app\.src$") of
                                          {match, _} -> true;
                                          _ -> false
                                      end
                              end, Files),
    FullPath = unicode:characters_to_list([SrcPath, "/", FileName]),
    file:script(FullPath).

get_deps_list() ->
    {ok, Lock} = file:consult("rebar.lock"),
    DepsList = proplists:get_value("1.1.0", Lock, []),
    lists:map(fun convert_dep/1, DepsList).

convert_dep({Name, {pkg, _, Vsn}, _}) ->
    {hex, Name, Vsn};
convert_dep({Name, {git, Repo, Meta}, _}) ->
    {git, Name, Repo, Meta}.
