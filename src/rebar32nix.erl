-module(rebar32nix).

%% API exports
-export([main/1]).

%%====================================================================
%% API functions
%%====================================================================

%% escript Entry point
main(Args) ->
    %% io:format("Args: ~p~n", [Args]),
    _ = application:load(rebar32nix),
    {ok, {application, AppName, List}} = app_src(),
    Deps = get_deps_list(),
    Vsn = proplists:get_value(vsn, List),
    Doc = prettypr:above(header(Args), beam2nix:new(AppName, Vsn, "./.", Deps)),
    io:format("~s", [prettypr:format(Doc)]),
    erlang:halt(0).

%%====================================================================
%% Internal functions
%%====================================================================
-spec header([string()]) -> prettypr:document().
header(Args) ->
    ArgsDoc = lists:map(fun prettypr:text/1, Args),
    {ok, Vsn} = application:get_key(rebar32nix, vsn),
    prettypr:sep([
                  prettypr:text("# Generated by rebar32nix"),
                  prettypr:beside(prettypr:text(Vsn), prettypr:text(":")),
                  prettypr:text("rebar32nix")
                  | ArgsDoc]).

-spec app_src() -> {ok, term()}.
app_src() ->
    SrcPath = "./src",
    {ok, Files} = file:list_dir(SrcPath),
    [FileName] = lists:filter(fun(F) ->
                                      case re:run(F, "\.app\.src$") of
                                          {match, _} -> true;
                                          _ -> false
                                      end
                              end, Files),
    FullPath = unicode:characters_to_list([SrcPath, "/", FileName]),
    file:script(FullPath).

get_deps_list() ->
    {ok, Lock} = file:consult("rebar.lock"),
    DepsList = proplists:get_value("1.1.0", Lock, []),
    lists:map(fun({Name, {pkg, _, Vsn}, _}) ->
                      {Name, Vsn}
              end, DepsList).
